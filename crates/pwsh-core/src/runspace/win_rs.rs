use protocol_winrm::{
    cores::{Shell, Tag, U32, anytag::AnyTag},
    rsp::rsp::ShellValue,
    ws_management::{self, OptionSetValue},
};
use xml::builder::Element;
// class WinRS(object):
//     def __init__(
//         self,
//         wsman: WSMan,
//         resource_uri: str = "http://schemas.microsoft.com/wbem/wsman/1/windows/shell/cmd",
//         id: typing.Optional[str] = None,
//         input_streams: str = "stdin",
//         output_streams: str = "stdout stderr",
//         codepage: typing.Optional[int] = None,
//         environment: typing.Optional[typing.Dict[str, str]] = None,
//         idle_time_out: typing.Optional[int] = None,
//         lifetime: typing.Optional[int] = None,
//         name: typing.Optional[str] = None,
//         no_profile: typing.Optional[bool] = None,
//         working_directory: typing.Optional[str] = None,
//     ) -> None:
//         """
//         A WinRS shell instance. This is used by Process to spawn a new command/
//         process on the raw WinRS shell.
//         :param wsman: The pypsrp.wsman.WSMan instance to send commands over
//         :param resource_uri: The resource URI of the shell, defaults to the
//             WinRS cmd shell
//         :param id: The ID of the shell, if not specified a dynamic ID will be
//             generated by the host
//         :param input_streams: The input streams available to the shell
//         :param output_streams: The output streams available to the shell
//         :param codepage: The codepage of the shell
//         :param environment: A dictionary that contains environment key/values
//             that are created for the shell instance
//         :param idle_time_out: The idle timeout in seconds of the shell
//         :param lifetime: The total lifetime of the shell
//         :param name: The name (description) of the shell
//         :param no_profile: Whether to create the shell with the user profile
//             active or not
//         :param working_directory: The default working directory of the created
//             shell
//         """
//         self.wsman = wsman
//         self.opened = False
//         self.id = id
//         self.resource_uri = resource_uri
//         self.input_streams = input_streams
//         self.output_streams = output_streams
//         self.codepage = codepage
//         self.environment = environment
//         self.idle_time_out = idle_time_out
//         self.lifetime = lifetime
//         self.name = name
//         self.no_profile = no_profile
//         self.working_directory = working_directory
//         self.owner = None
//         self.client_ip = None
//         self.shell_run_time = None
//         self.shell_inactivity = None
#[derive(Debug, Clone, typed_builder::TypedBuilder)]
pub struct WinRunspace<'wsman> {
    #[builder(default = "stdin pr".to_string())]
    input_streams: String,
    #[builder(default = "stdout".to_string())]
    output_streams: String,
    #[builder(default, setter(strip_option))]
    environment: Option<std::collections::HashMap<String, String>>,
    #[builder(default, setter(strip_option))]
    idle_time_out: Option<u32>,
    #[builder(default, setter(strip_option))]
    name: Option<String>,

    #[builder(default = "http://schemas.microsoft.com/wbem/wsman/1/windows/shell/cmd".to_string())]
    resource_uri: String,

    #[builder(default = uuid::Uuid::new_v4())]
    id: uuid::Uuid,

    #[builder(default)]
    no_profile: Option<bool>,

    #[builder(default)]
    codepage: Option<u32>,

    ws_man: &'wsman protocol_winrm::ws_management::WsMan,
}

impl<'wsman> WinRunspace<'wsman> {
    pub fn open<'a>(
        &'a self,
        option_set: Option<OptionSetValue>,
        open_content: &'a str,
    ) -> impl Into<Element<'a>> {
        let shell = Tag::from_name(Shell)
            .with_attribute(protocol_winrm::cores::Attribute::ShellId(
                self.id.to_string().into(),
            ))
            .with_declaration(protocol_winrm::cores::Namespace::PowerShellRemoting);

        let shell_value = ShellValue::builder()
            .input_streams(self.input_streams.as_ref())
            .output_streams(self.output_streams.as_ref())
            .idle_time_out_opt(self.idle_time_out.map(Tag::from))
            .creation_xml(open_content)
            .build();

        let shell = shell.with_value(shell_value);

        let mut option_set = option_set.unwrap_or_default();

        if let Some(profile) = self.no_profile {
            option_set = option_set.add_option("WINRS_NOPROFILE", profile.to_string());
        }

        if let Some(codepage) = self.codepage {
            option_set = option_set.add_option("WINRS_CODEPAGE", codepage.to_string());
        }

        self.ws_man.invoke(
            ws_management::WsAction::Create,
            None,
            Some(AnyTag::Shell(shell)),
            Some(option_set),
            None,
        )
    }
}
